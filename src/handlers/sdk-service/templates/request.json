{
  "request": "import {Result, failure} from '../../../../utils';\nimport {createToken} from '../../../auth/createToken/createToken';\n\nimport {adapter} from './adapter';\nimport {{{errorClass}}} from './error';\nimport {Reservation} from './types';\nimport {{{name}}Middle} from './middle'\n\nexport const {{name}} = async (): Promise<\n  Result<Reservation, GetReservationToCancelError>\n> => {\n  const tokenResult = await createToken();\n  if (tokenResult.kind === 'failure') {\n    return failure(new {{errorClass}}('unknown'));\n  }\n\n  const response = await {{name}}Middle();\n\n  if (response.kind === 'failure') {\n    return failure(new {{errorClass}}('unknown'));\n  }\n\n  return adapter.toEntity(response.data);\n};\n",
  "middle": "import {isHttpError, type HttpError} from '../../../../../networking';\nimport {failure, success, type Result} from '../../../../../utils';\nimport {middleRequest} from '../../../../middleRequest';\n\nimport type {MiddleResponse, RequestParams} from './types';\n\nexport const {{{name}}}Middle = async ({}: RequestParams): Promise<Result<MiddleResponse, HttpError>> => {\n  try {\n    const response = await middleRequest<MiddleResponse>('c', {\n      method: 'POST',\n      path: '/passenger/details', // path da requisição\n      params: {\n        // query params enviados na requisição\n      },\n      data: {\n        // dados enviados no body\n      },\n    });\n    return success(response.data);\n  } catch (error) {\n    if (isHttpError(error)) {\n      return failure(error);\n    }\n\n    throw error;\n  }\n};",
  "adapter": "import {Result, success} from '../../../../utils';\n\nconst toEntity = ({\n  response,\n}: ReservationMiddleResponse): Result<\n  ReservationCheckIn,\n  GetReservationToCancelError\n> => {\n  const {reservation} = response.pnrLookupResponse;\n\n\t// Trata\n  const destination = extractKeyFromFlightDetail(reservation.itinerary, 'arrivalAirport');\n  const origin = extractKeyFromFlightDetail(reservation.itinerary, 'departureAirport');\n  \n  return success({\n    destination,\n    origin,\n  });\n};\n\nexport const adapter = {\n  toEntity,\n};"
}
