{
  "request": "import {Result, failure} from '../../../../utils';\nimport {createToken} from '../../../auth/createToken/createToken';\n\nimport {adapter} from './adapter';\nimport {{{errorClass}}} from './error';\nimport {{{name}}Middle} from './middle';\nimport {{{nameUpperCase}}Adapter} from './types';\n\nexport const {{name}} = async (): Promise<\n  Result<{{nameUpperCase}}Adapter, {{errorClass}}>\n> => {\n  const tokenResult = await createToken();\n  if (tokenResult.kind === 'failure') {\n    return failure(new {{errorClass}}('unknown'));\n  }\n\n  const response = await {{name}}Middle();\n\n  if (response.kind === 'failure') {\n    return failure(new {{errorClass}}('unknown'));\n  }\n\n  return adapter.toEntity(response.data);\n};\n",
  "middle": "import {isHttpError, type HttpError} from '../../../../../networking';\nimport {failure, success, type Result} from '../../../../../utils';\nimport {middleRequest} from '../../../../middleRequest';\n\nimport type {MiddleResponse, RequestParams} from './types';\n\nexport const {{name}}Middle = async ({}: RequestParams): Promise<\n  Result<MiddleResponse, HttpError>\n> => {\n  try {\n    const response = await middleRequest<MiddleResponse>('', {\n      method: '', // request method ,\n      path: '', // endpoint example: 'passenger/details'\n      params: {\n        // query params\n      },\n      data: {\n        // data send on request body\n      },\n    });\n    return success(response.data);\n  } catch (error) {\n    if (isHttpError(error)) {\n      return failure(error);\n    }\n\n    throw error;\n  }\n};",
  "adapter": "import {Result, success} from '../../../../utils';\n\nimport {{{name}}Error} from './error';\nimport {MiddleResponse} from './middle';\nimport {{{name}}Adapter} from './types';\n\nconst toEntity = ({}: MiddleResponse): Result<\n  {{name}}Adapter,\n  {{name}}Error\n> => {\n  // Handle the data received from middle here, this is our BFF.\n  return success({});\n};\n\nexport const adapter = {\n  toEntity,\n};\n"
}
